"""This module provides the Degree mixin, which groups related methods for generating degree information using the DegreeProvider.

The mixin ensures that the data generated by each method is unique within a specified context or session. It achieves this by:
* Maintaining sets to store previously generated degrees.
* Checking against these sets when generating new degrees.
* Removing already generated degrees from the available options.
* Resetting the sets if all options have been exhausted to avoid an infinite loop.
"""

import random

from fakernaija.providers.degree_provider import DegreeProvider


class Degree:
    """Methods for the DegreeProvider."""

    def __init__(self) -> None:
        """Initializes the Degree mixin and its provider."""
        self.degree_provider = DegreeProvider()
        self._used_degrees: set[str] = set()
        self._used_undergraduate_degrees: set[str] = set()
        self._used_masters_degrees: set[str] = set()
        self._used_doctorate_degrees: set[str] = set()

    def degree(self, initial: bool = False) -> str:
        """Generates a random degree or degree initial.

        Args:
            initial (bool): If True, returns the degree initial instead of the full name. Defaults to False.

        Returns:
            str: A random degree or degree initial.

        Example:
            .. code-block:: python

                >>> from fakernaija.faker import Faker
                >>> naija = Faker()

                >>> degree = naija.degree()
                >>> print(f"Random degree: {degree}")
                'Random degree: Bachelor of Science'

                >>> degree_initial = naija.degree(initial=True)
                >>> print(f"Random degree: {degree_initial}")
                'Random degree: B.Sc.'
        """
        degrees = (
            self.degree_provider.get_degree_initials()
            if initial
            else self.degree_provider.get_degrees()
        )
        degree = self._get_unique_value(degrees, self._used_degrees)
        self._used_degrees.add(degree)
        return degree

    def undergraduate_degree(self, initial: bool = False) -> str:
        """Generates a random undergraduate degree or degree initial.

        Args:
            initial (bool): If True, returns the degree initial instead of the full name. Defaults to False.

        Returns:
            str: A random undergraduate degree or degree initial.

        Example:
            .. code-block:: python

                >>> from fakernaija.faker import Faker
                >>> naija = Faker()

                >>> undergraduate_degree = naija.undergraduate_degree()
                >>> print(f"Random undergraduate degree: {undergraduate_degree}")
                'Random undergraduate degree: Bachelor of Arts'

                >>> undergraduate_degree = naija.undergraduate_degree(initial=True)
                >>> print(f"Random undergraduate degree: {undergraduate_degree}")
                'Random undergraduate degree: B.A.'
        """
        degrees = self.degree_provider.get_undergraduate_degrees(initial)
        degree = self._get_unique_value(degrees, self._used_undergraduate_degrees)
        self._used_undergraduate_degrees.add(degree)
        return degree

    def masters_degree(self, initial: bool = False) -> str:
        """Generates a random masters degree or degree initial.

        Args:
            initial (bool): If True, returns the degree initial instead of the full name. Defaults to False.

        Returns:
            str: A random masters degree or degree initial.

        Example:
            .. code-block:: python

                >>> from fakernaija.faker import Faker
                >>> naija = Faker()

                >>> masters_degree = naija.masters_degree()
                >>> print(f"Random masters degree: {masters_degree}")
                'Random masters degree: Master of Science'

                >>> masters_degree = naija.masters_degree(initial=True)
                >>> print(f"Random masters degree: {masters_degree}")
                'Random masters degree: M.Sc.'
        """
        degrees = self.degree_provider.get_masters_degrees(initial)
        degree = self._get_unique_value(degrees, self._used_masters_degrees)
        self._used_masters_degrees.add(degree)
        return degree

    def doctorate_degree(self, initial: bool = False) -> str:
        """Generates a random doctorate degree or degree initial.

        Args:
            initial (bool): If True, returns the degree initial instead of the full name. Defaults to False.

        Returns:
            str: A random doctorate degree or degree initial.

        Example:
            .. code-block:: python

                >>> from fakernaija.faker import Faker
                >>> naija = Faker()

                >>> doctorate_degree = naija.doctorate_degree()
                >>> print(f"Random doctorate degree: {doctorate_degree}")
                'Random doctorate degree: Doctor of Philosophy'

                >>> doctorate_degree = naija.doctorate_degree(initial=True)
                >>> print(f"Random doctorate degree: {doctorate_degree}")
                'Random doctorate degree: Ph.D.'
        """
        degrees = self.degree_provider.get_doctorate_degrees(initial)
        degree = self._get_unique_value(degrees, self._used_doctorate_degrees)
        self._used_doctorate_degrees.add(degree)
        return degree

    def _get_unique_value(self, values: list[str], used_values: set[str]) -> str:
        """Helper method to get a unique value from a list of values.

        Args:
            values (list[str]): The list of possible values.
            used_values (set[str]): The set of values that have already been used.

        Returns:
            str: A unique value from the list.
        """
        available_values = set(values) - used_values
        if not available_values:
            # If all values have been used, reset the used values set
            used_values.clear()
            available_values = set(values)
        return random.choice(list(available_values))
